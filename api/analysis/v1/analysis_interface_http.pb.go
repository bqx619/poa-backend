// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AnalysisInterfaceHTTPServer interface {
	EmotionDistribute(context.Context, *EmotionDistributeRequest) (*EmotionDistributeReply, error)
	EmotionNotice(context.Context, *EmotionNoticeRequest) (*EmotionNoticeReply, error)
	GetAnalysis(context.Context, *GetAnalysisRequest) (*GetAnalysisReply, error)
	ListAnalysis(context.Context, *ListAnalysisRequest) (*ListAnalysisReply, error)
	RunAnalysis(context.Context, *RunAnalysisRequest) (*RunAnalysisReply, error)
	Top10Area(context.Context, *Top10AreaRequest) (*Top10Reply, error)
	Top10Category(context.Context, *Top10CategoryRequest) (*Top10Reply, error)
	Top10Keywords(context.Context, *Top10KeywordsRequest) (*Top10Reply, error)
}

func RegisterAnalysisInterfaceHTTPServer(s *http.Server, srv AnalysisInterfaceHTTPServer) {
	r := s.Route("/")
	r.PUT("/analysis/v1/run", _AnalysisInterface_RunAnalysis0_HTTP_Handler(srv))
	r.GET("/analysis/v1/category/top10", _AnalysisInterface_Top10Category0_HTTP_Handler(srv))
	r.GET("/analysis/v1/area/top10", _AnalysisInterface_Top10Area0_HTTP_Handler(srv))
	r.GET("/analysis/v1/keywords/top10", _AnalysisInterface_Top10Keywords0_HTTP_Handler(srv))
	r.GET("/analysis/v1/emotion/distribute", _AnalysisInterface_EmotionDistribute0_HTTP_Handler(srv))
	r.GET("/analysis/v1/emotion/notice", _AnalysisInterface_EmotionNotice0_HTTP_Handler(srv))
	r.GET("/analysis/v1/{id}", _AnalysisInterface_GetAnalysis0_HTTP_Handler(srv))
	r.GET("/analysis/v1", _AnalysisInterface_ListAnalysis0_HTTP_Handler(srv))
}

func _AnalysisInterface_RunAnalysis0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RunAnalysisRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/RunAnalysis")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RunAnalysis(ctx, req.(*RunAnalysisRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RunAnalysisReply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_Top10Category0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Top10CategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/Top10Category")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Top10Category(ctx, req.(*Top10CategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Top10Reply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_Top10Area0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Top10AreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/Top10Area")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Top10Area(ctx, req.(*Top10AreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Top10Reply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_Top10Keywords0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Top10KeywordsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/Top10Keywords")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Top10Keywords(ctx, req.(*Top10KeywordsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Top10Reply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_EmotionDistribute0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmotionDistributeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/EmotionDistribute")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmotionDistribute(ctx, req.(*EmotionDistributeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmotionDistributeReply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_EmotionNotice0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmotionNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/EmotionNotice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmotionNotice(ctx, req.(*EmotionNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmotionNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_GetAnalysis0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAnalysisRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/GetAnalysis")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAnalysis(ctx, req.(*GetAnalysisRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAnalysisReply)
		return ctx.Result(200, reply)
	}
}

func _AnalysisInterface_ListAnalysis0_HTTP_Handler(srv AnalysisInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAnalysisRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.analysis.v1.AnalysisInterface/ListAnalysis")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAnalysis(ctx, req.(*ListAnalysisRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAnalysisReply)
		return ctx.Result(200, reply)
	}
}

type AnalysisInterfaceHTTPClient interface {
	EmotionDistribute(ctx context.Context, req *EmotionDistributeRequest, opts ...http.CallOption) (rsp *EmotionDistributeReply, err error)
	EmotionNotice(ctx context.Context, req *EmotionNoticeRequest, opts ...http.CallOption) (rsp *EmotionNoticeReply, err error)
	GetAnalysis(ctx context.Context, req *GetAnalysisRequest, opts ...http.CallOption) (rsp *GetAnalysisReply, err error)
	ListAnalysis(ctx context.Context, req *ListAnalysisRequest, opts ...http.CallOption) (rsp *ListAnalysisReply, err error)
	RunAnalysis(ctx context.Context, req *RunAnalysisRequest, opts ...http.CallOption) (rsp *RunAnalysisReply, err error)
	Top10Area(ctx context.Context, req *Top10AreaRequest, opts ...http.CallOption) (rsp *Top10Reply, err error)
	Top10Category(ctx context.Context, req *Top10CategoryRequest, opts ...http.CallOption) (rsp *Top10Reply, err error)
	Top10Keywords(ctx context.Context, req *Top10KeywordsRequest, opts ...http.CallOption) (rsp *Top10Reply, err error)
}

type AnalysisInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewAnalysisInterfaceHTTPClient(client *http.Client) AnalysisInterfaceHTTPClient {
	return &AnalysisInterfaceHTTPClientImpl{client}
}

func (c *AnalysisInterfaceHTTPClientImpl) EmotionDistribute(ctx context.Context, in *EmotionDistributeRequest, opts ...http.CallOption) (*EmotionDistributeReply, error) {
	var out EmotionDistributeReply
	pattern := "/analysis/v1/emotion/distribute"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/EmotionDistribute"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) EmotionNotice(ctx context.Context, in *EmotionNoticeRequest, opts ...http.CallOption) (*EmotionNoticeReply, error) {
	var out EmotionNoticeReply
	pattern := "/analysis/v1/emotion/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/EmotionNotice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...http.CallOption) (*GetAnalysisReply, error) {
	var out GetAnalysisReply
	pattern := "/analysis/v1/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/GetAnalysis"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) ListAnalysis(ctx context.Context, in *ListAnalysisRequest, opts ...http.CallOption) (*ListAnalysisReply, error) {
	var out ListAnalysisReply
	pattern := "/analysis/v1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/ListAnalysis"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) RunAnalysis(ctx context.Context, in *RunAnalysisRequest, opts ...http.CallOption) (*RunAnalysisReply, error) {
	var out RunAnalysisReply
	pattern := "/analysis/v1/run"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/RunAnalysis"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) Top10Area(ctx context.Context, in *Top10AreaRequest, opts ...http.CallOption) (*Top10Reply, error) {
	var out Top10Reply
	pattern := "/analysis/v1/area/top10"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/Top10Area"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) Top10Category(ctx context.Context, in *Top10CategoryRequest, opts ...http.CallOption) (*Top10Reply, error) {
	var out Top10Reply
	pattern := "/analysis/v1/category/top10"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/Top10Category"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnalysisInterfaceHTTPClientImpl) Top10Keywords(ctx context.Context, in *Top10KeywordsRequest, opts ...http.CallOption) (*Top10Reply, error) {
	var out Top10Reply
	pattern := "/analysis/v1/keywords/top10"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.analysis.v1.AnalysisInterface/Top10Keywords"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
