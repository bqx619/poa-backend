// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RefactorInterfaceClient is the client API for RefactorInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefactorInterfaceClient interface {
	RecapRefactor(ctx context.Context, in *RecapRefactorRequest, opts ...grpc.CallOption) (*RecapRefactorReply, error)
	GetRefactor(ctx context.Context, in *GetRefactorRequest, opts ...grpc.CallOption) (*GetRefactorReply, error)
	ListRefactor(ctx context.Context, in *ListRefactorRequest, opts ...grpc.CallOption) (*ListRefactorReply, error)
	RunRefactor(ctx context.Context, in *RunRefactorRequest, opts ...grpc.CallOption) (*RunRefactorReply, error)
}

type refactorInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefactorInterfaceClient(cc grpc.ClientConnInterface) RefactorInterfaceClient {
	return &refactorInterfaceClient{cc}
}

func (c *refactorInterfaceClient) RecapRefactor(ctx context.Context, in *RecapRefactorRequest, opts ...grpc.CallOption) (*RecapRefactorReply, error) {
	out := new(RecapRefactorReply)
	err := c.cc.Invoke(ctx, "/api.refactor.v1.RefactorInterface/RecapRefactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refactorInterfaceClient) GetRefactor(ctx context.Context, in *GetRefactorRequest, opts ...grpc.CallOption) (*GetRefactorReply, error) {
	out := new(GetRefactorReply)
	err := c.cc.Invoke(ctx, "/api.refactor.v1.RefactorInterface/GetRefactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refactorInterfaceClient) ListRefactor(ctx context.Context, in *ListRefactorRequest, opts ...grpc.CallOption) (*ListRefactorReply, error) {
	out := new(ListRefactorReply)
	err := c.cc.Invoke(ctx, "/api.refactor.v1.RefactorInterface/ListRefactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refactorInterfaceClient) RunRefactor(ctx context.Context, in *RunRefactorRequest, opts ...grpc.CallOption) (*RunRefactorReply, error) {
	out := new(RunRefactorReply)
	err := c.cc.Invoke(ctx, "/api.refactor.v1.RefactorInterface/RunRefactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefactorInterfaceServer is the server API for RefactorInterface service.
// All implementations must embed UnimplementedRefactorInterfaceServer
// for forward compatibility
type RefactorInterfaceServer interface {
	RecapRefactor(context.Context, *RecapRefactorRequest) (*RecapRefactorReply, error)
	GetRefactor(context.Context, *GetRefactorRequest) (*GetRefactorReply, error)
	ListRefactor(context.Context, *ListRefactorRequest) (*ListRefactorReply, error)
	RunRefactor(context.Context, *RunRefactorRequest) (*RunRefactorReply, error)
	mustEmbedUnimplementedRefactorInterfaceServer()
}

// UnimplementedRefactorInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedRefactorInterfaceServer struct {
}

func (UnimplementedRefactorInterfaceServer) RecapRefactor(context.Context, *RecapRefactorRequest) (*RecapRefactorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecapRefactor not implemented")
}
func (UnimplementedRefactorInterfaceServer) GetRefactor(context.Context, *GetRefactorRequest) (*GetRefactorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefactor not implemented")
}
func (UnimplementedRefactorInterfaceServer) ListRefactor(context.Context, *ListRefactorRequest) (*ListRefactorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefactor not implemented")
}
func (UnimplementedRefactorInterfaceServer) RunRefactor(context.Context, *RunRefactorRequest) (*RunRefactorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRefactor not implemented")
}
func (UnimplementedRefactorInterfaceServer) mustEmbedUnimplementedRefactorInterfaceServer() {}

// UnsafeRefactorInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefactorInterfaceServer will
// result in compilation errors.
type UnsafeRefactorInterfaceServer interface {
	mustEmbedUnimplementedRefactorInterfaceServer()
}

func RegisterRefactorInterfaceServer(s grpc.ServiceRegistrar, srv RefactorInterfaceServer) {
	s.RegisterService(&RefactorInterface_ServiceDesc, srv)
}

func _RefactorInterface_RecapRefactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecapRefactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefactorInterfaceServer).RecapRefactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.refactor.v1.RefactorInterface/RecapRefactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefactorInterfaceServer).RecapRefactor(ctx, req.(*RecapRefactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefactorInterface_GetRefactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefactorInterfaceServer).GetRefactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.refactor.v1.RefactorInterface/GetRefactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefactorInterfaceServer).GetRefactor(ctx, req.(*GetRefactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefactorInterface_ListRefactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefactorInterfaceServer).ListRefactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.refactor.v1.RefactorInterface/ListRefactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefactorInterfaceServer).ListRefactor(ctx, req.(*ListRefactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefactorInterface_RunRefactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRefactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefactorInterfaceServer).RunRefactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.refactor.v1.RefactorInterface/RunRefactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefactorInterfaceServer).RunRefactor(ctx, req.(*RunRefactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefactorInterface_ServiceDesc is the grpc.ServiceDesc for RefactorInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefactorInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.refactor.v1.RefactorInterface",
	HandlerType: (*RefactorInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecapRefactor",
			Handler:    _RefactorInterface_RecapRefactor_Handler,
		},
		{
			MethodName: "GetRefactor",
			Handler:    _RefactorInterface_GetRefactor_Handler,
		},
		{
			MethodName: "ListRefactor",
			Handler:    _RefactorInterface_ListRefactor_Handler,
		},
		{
			MethodName: "RunRefactor",
			Handler:    _RefactorInterface_RunRefactor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/analysis/v1/refactor_interface.proto",
}
